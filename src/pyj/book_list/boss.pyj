# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

from ajax import encode_query
from dom import set_css
from elementmaker import E
from modals import error_dialog, create_modal_container
from gettext import gettext as _
from widgets import get_widget_css
from utils import parse_url_params

from book_list.globals import get_session_data, set_boss, set_current_query
from book_list.theme import get_color
from book_list.ui import UI

class Boss:

    def __init__(self, interface_data):
        set_boss(self)
        document.head.appendChild(E.style(get_widget_css()))
        set_css(document.body, background_color=get_color('window-background'), color=get_color('window-foreground'))
        create_modal_container()
        self.interface_data = interface_data
        self.current_library_id = interface_data['default_library']
        self.current_library_name = interface_data['library_map'][self.current_library_id]
        self.current_mode = 'book_list'
        self.update_window_title()
        div = E.div(id='book-list-container')
        document.body.appendChild(div)
        self.ui = UI(interface_data, div)
        window.onerror = self.onerror.bind(self)
        self.history_count = 0
        data = parse_url_params()
        set_current_query(data)
        self.ui.apply_state()  # Render the book list
        if not data.mode or data.mode == 'book_list':
            if data.panel != self.ui.current_panel:
                self.ui.show_panel(data.panel, push_state=False)
        setTimeout(def():
            window.onpopstate = self.onpopstate.bind(self)
        , 0)  # We do this after event loop ticks over to avoid catching popstate events that some browsers send on page load

    @property
    def has_history(self):
        return self.history_count > 0

    def update_window_title(self):
        document.title = 'calibre :: ' + self.current_library_name

    def onerror(self, msg, script_url, line_number, column_number, error_object):
        try:
            fname = str.rpartition(script_url, '/')[-1] or script_url
            msg = msg + '<br><span style="font-size:smaller">' + str.format('Error at {}:{}:{}', fname, line_number, column_number or '') + '</span>'
            details = ''
            if error_object and error_object.stack:
                details = error_object.stack
            error_dialog(_('Unhandled error'), msg, details)
            return True
        except:
            console.error('There was an error in the unhandled exception handler')

    def onpopstate(self, ev):
        data = parse_url_params()
        set_current_query(data)
        mode = data.mode or 'book_list'
        self.history_count -= 1
        if mode == 'book_list':
            search = data.search or ''
            if data.panel != self.ui.current_panel:
                self.ui.show_panel(data.panel, push_state=False)
            if search != self.ui.books_view.interface_data.search_result.query:
                self.ui.books_view.change_search(search, push_state=False, panel_to_show=data.panel)

    def change_books(self, data):
        data.search_result.sort = str.split(data.search_result.sort, ',')[:2].join(',')
        data.search_result.sort_order = str.split(data.search_result.sort_order, ',')[:2].join(',')
        sval = ''
        for field, order in zip(str.split(data.search_result.sort, ','), str.split(data.search_result.sort_order, ',')):
            sval += field + '.' + order + ','
        get_session_data().set('sort', str.rstrip(sval, ','))
        self.interface_data.metadata = data.metadata
        self.interface_data.search_result = data.search_result
        self.ui.refresh_books_view()

    def push_state(self, replace=False, extra_query_data=None):
        query = {}
        if extra_query_data:
            for k in extra_query_data:
                query[k] = extra_query_data[k]
        if self.current_mode == 'book_list':
            if self.ui.current_panel != self.ui.ROOT_PANEL:
                query.panel = self.ui.current_panel
        else:
            query.current_mode = self.current_mode
        idata = self.interface_data
        if idata.library_id != idata.default_library:
            query.library_id = idata.library_id
        sq = idata.search_result.query
        if sq:
            query.search = sq
        set_current_query(query)
        query = encode_query(query) or '?'
        if replace:
            window.history.replaceState(None, '', query)
        else:
            window.history.pushState(None, '', query)
            self.history_count += 1
