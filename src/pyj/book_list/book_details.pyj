# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from ajax import ajax
from book_list.globals import get_current_query
from dom import clear
from elementmaker import E
from gettext import gettext as _
from book_list.globals import get_boss
from modals import error_dialog
from widgets import create_spinner

bd_counter = 0

class BookDetailsPanel:

    def __init__(self, interface_data, book_list_container):
        nonlocal bd_counter
        bd_counter += 1
        self.container_id = 'book-details-panel-' + bd_counter
        style = ''
        div = E.div(
            id=self.container_id, style='display:none',
            E.style(style, type='text/css')
        )
        book_list_container.appendChild(div)
        self.interface_data = interface_data

    @property
    def container(self):
        return document.getElementById(self.container_id)

    @property
    def is_visible(self):
        self.container.style.display == 'block'

    @is_visible.setter
    def is_visible(self, val):
        self.container.style.display = 'block' if val else 'none'

    def init(self, data):
        c = self.container
        clear(c)
        book_id = get_current_query()['book-id']
        if book_id is undefined or book_id is None:
            self.no_book()
        elif book_id in self.interface_data.metadata:
            self.render_book(book_id)
        else:
            self.fetch_metadata(book_id)
        get_boss().ui.set_button_visibility('random', not book_id or book_id == '0')

    def show_random(self):
        self.fetch_metadata('0')

    def no_book(self, book_id):
        self.container.appendChild(E.div(
            style='margin: 1ex 1em',
            _('No book found')
        ))

    def fetch_metadata(self, book_id):
        if self.is_fetching:
            self.is_fetching.abort()
        self.is_fetching = ajax('interface-data/book-metadata/' + book_id, self.metadata_fetched.bind(self),
                                query={'library_id':self.interface_data.library_id})
        self.is_fetching.send()
        self.container.appendChild(E.div(
            style='margin: 1ex 1em',
            create_spinner(), '\xa0' + _('Fetching metadata for the book, please wait') + 'â€¦',
        ))

    def metadata_fetched(self, end_type, xhr, event):
        if self.is_fetching is None or self.is_fetching is not xhr:
            return  # Fetching was aborted
        self.is_fetching = None
        c = self.container
        if end_type == 'load':
            try:
                data = JSON.parse(xhr.responseText)
            except Exception as err:
                error_dialog(_('Could not fetch metadata for book'), _('Server returned an invalid response'), err.stack or err.toString())
                return
            clear(c)
            book_id = data['id']
            self.interface_data.metadata[book_id] = data
            self.render_book(book_id)
        elif end_type != 'abort':
            clear(c)
            c.appendChild(E.div(
                style='margin: 1ex 1em',
                _('Could not fetch metadata for book'),
                E.div(style='margin: 1ex 1em')
            ))
            c.lastChild.lastChild.innerHTML = xhr.error_html

    def render_book(self, book_id):
        metadata = self.interface_data.metadata[book_id]
        get_boss().ui.set_title(metadata.title)
        cover_url = str.format('get/cover/{}/{}', book_id, self.interface_data['library_id'])
        alt = str.format(_('{} by {}'), metadata['title'], metadata['authors'].join(' & '))
        img = E.img(
            src=cover_url, alt=alt, title=alt, data_title=metadata['title'], data_authors=metadata['authors'].join(' & '),
            style='max-width: 45vw; max-height: 93vh; display: block; width:auto; height:auto; float:right'
        )
        img.onerror = self.on_img_err.bind(self)
        c = self.container
        c.appendChild(E.div(
            style='display:block; padding: 1ex 1em',
        E.div(style='margin-right: 1em; float:left'),
            img
        ))

    def on_img_err(self, err):
        img = err.target
        img.style.display = 'none'
