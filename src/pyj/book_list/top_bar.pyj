# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

from book_list.theme import get_color, get_font_size
from dom import set_css, clear, create_keyframes, build_rule
from elementmaker import E
from gettext import gettext as _

bar_counter = 0

class TopBar:

    SPACING = '0.75em'

    def __init__(self):
        nonlocal bar_counter
        bar_counter += 1
        self.bar_id, self.dummy_bar_id = 'top-bar-' + bar_counter, 'dummy-top-bar-' + bar_counter
        self.throbber_name = self.bar_id + '-throbber'
        style = create_keyframes(self.throbber_name, 'from { transform: scale(1); } 50% { transform: scale(0.5); } to { transform: scale(1); }')
        style += build_rule('#' + self.bar_id + ' a:hover', transform='scale(1.4)')
        style += build_rule('#' + self.bar_id + ' a:active', color=get_color('bar-highlight'))
        for bid in self.dummy_bar_id, self.bar_id:
            bar = E.div(
                id=bid, class_='top-bar', style="padding-left: 0.5em; padding-right: 0.5em; padding-top: 0.5ex; padding-bottom: 0.5ex",
                E.div(style="display:table-cell;"),
                E.div(style="display:table-cell; text-align:right; padding-right: " + self.SPACING)
            )
            if bid == self.bar_id:
                set_css(bar, position='fixed', left='0', top='0')
                bar.appendChild(E.style(style, type='text/css'))
            set_css(bar,
                    width='100%', display='table', font_size=get_font_size('title'),
                    color=get_color('bar-foreground'), background_color=get_color('bar-background'))
            document.body.appendChild(bar)

    @property
    def bar(self):
        return document.getElementById(self.bar_id)

    @property
    def dummy_bar(self):
        return document.getElementById(self.dummy_bar_id)

    def set_left(self, title='calibre', icon_name='heart', action=None, tooltip='', run_animation=False):
        if icon_name == 'heart':
            if not tooltip:
                tooltip = _('Donate to support calibre development')

        for bar in self.bar, self.dummy_bar:
            left = bar.firstChild
            clear(left)
            left.appendChild(E.a(
                style="overflow: hidden; display:inline-block; vertical-align:text-top",
                href="javascript:void(0)", title=tooltip,
                E.i(class_='fa fa-' + icon_name)
            ))
            a = left.firstChild
            left.appendChild(E.span(title, style=str.format('margin-left: {}; font-weight: bold; text-overflow:ellipsis; overflow: hidden', self.SPACING)))
            if bar is self.bar:
                if icon_name == 'heart':
                    set_css(a,
                        animation_name=self.throbber_name, animation_duration='1s', animation_timing_function='ease-in-out',
                        animation_iteration_count='5', animation_play_state='running' if run_animation else 'paused'
                    )
                    set_css(a.firstChild, color=get_color('heart'))
                    a.setAttribute('href', 'http://calibre-ebook.com/donate')
                    a.setAttribute('target', 'donate-to-calibre')
                if action is not None:
                    a.addEventListener('click', def(event): event.preventDefault(), action();)

    def add_button(self, icon_name=None, action=None, tooltip=''):
        if not icon_name:
            return
        for bar in self.bar, self.dummy_bar:
            right = bar.firstChild.nextSibling
            right.appendChild(E.a(
                style="overflow: hidden; display:inline-block; vertical-align:text-top; margin-right: " + self.SPACING,
                href="javascript:void(0)", title=tooltip,
                E.i(class_='fa fa-' + icon_name)
            ))
            a = right.firstChild
            if bar is self.bar:
                if action is not None:
                    a.addEventListener('click', def(event): event.preventDefault(), action();)

    def apply_state(self, left, buttons):
        self.set_left(**left)
        for bar in self.bar, self.dummy_bar:
            right = bar.firstChild.nextSibling
            clear(right)
        for button in buttons:
            self.add_button(**button)
