# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from elementmaker import E
from gettext import gettext as _
from read_book.globals import messenger, iframe_id
from read_book.resources import ResourceManager

LOADING_DOC = '''
<!DOCTYPE html>
<html>
<head>
<script type="text/javascript" id="bootstrap">
__SCRIPT__
end_script
</head>
<body>
__BS__
</body>
</html>
'''.replace('end_script', '<' + '/script>')  # cannot have a closing script tag as this is embedded inside a script tag in index.html

class View:

    def __init__(self, container, ui):
        self.ui = ui
        self.resource_manager = ResourceManager()
        self.virtualized_resources = {}
        container.appendChild(
            E.iframe(
                id=iframe_id,
                seamless=True,
                sandbox='allow-popups allow-scripts',
            )
        )
        self.src_doc = None
        self.iframe_ready = False
        self.pending_spine_load = None
        self.encrypted_communications = False
        self.create_src_doc()
        window.addEventListener('message', self.handle_message.bind(self), False)
        self.handlers = {
            'ready': self.on_iframe_ready.bind(self),
        }

    @property
    def iframe(self):
        return document.getElementById(iframe_id)

    def create_src_doc(self):
        iframe_script = self.ui.interface_data.main_js.replace(/is_running_in_iframe\s*=\s*false/, 'is_running_in_iframe = true')
        self.ui.interface_data.main_js = None
        self.src_doc = self.iframe.srcdoc = LOADING_DOC.replace(
            '__SCRIPT__', iframe_script).replace(
            '__BS__', _('Bootstrapping book reader...'))

    def init_iframe(self, iframe_script):
        self.encrypted_communications = False
        self.iframe.srcdoc = self.src_doc

    def send_message(self, data):
        if self.encrypted_communications:
            data = messenger.encrypt(data)
        self.iframe.contentWindow.postMessage(data, '*')

    def handle_message(self, event):
        if event.source is not self.iframe.contentWindow:
            return
        data = event.data
        if self.encrypted_communications:
            try:
                data = messenger.decrypt(data)
            except Exception as e:
                print('Could not process message from iframe:')
                console.log(e)
                return
        func = self.handlers[data.action]
        if func:
            func(data)
        else:
            print('Unknown action in message from iframe to parent: ' + data.action)

    def on_iframe_ready(self, data):
        messenger.reset()
        self.send_message({'action':'keys', 'secret':messenger.secret})
        self.iframe_ready = True
        if self.pending_spine_load:
            self.show_spine_item_stage2()

    def show_loading(self, title):
        return  # TODO: Implement this

    def display_book(self, book):
        self.book = book
        self.show_loading(book.metadata.title)
        self.ui.db.update_last_read_time(book)
        # TODO: Check for last open position of book
        name = book.manifest.spine[0]
        self.resource_manager.new_root(self.ui.db, book, name, self.show_spine_item.bind(self))

    def show_spine_item(self, resource_data):
        # Re-init the iframe to ensure any changes made to the environment by the last spine item are lost
        self.init_iframe()
        # Now wait for frame to message that it is ready
        self.pending_spine_load = resource_data

    def show_spine_item_stage2(self):
        pass
