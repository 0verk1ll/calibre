# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals, bound_methods

from dom import clear, set_css
from elementmaker import E
from book_list.theme import get_color
from widgets import create_spinner

class LoadingMessage:  # {{{

    def __init__(self, msg):
        self.msg = msg or ''

    def show(self, container):
        container.style.backgroundColor = get_color('window-background')
        container.appendChild(
            E.div(
                style='text-align:center',
                E.div(create_spinner('100px', '100px')),
                E.h2()
        ))
        container.firstChild.lastChild.innerHTML = self.msg
        set_css(container.firstChild, position='relative', top='50%', transform='translateY(-50%)')

    def on_container_click(self, evt):
        pass  # Dont allow panel to be closed by a click
# }}}

class MainOverlay:  # {{{

    def __init__(self, overlay):
        self.overlay = overlay
        if window.Intl?.DateTimeFormat:
            self.date_formatter = window.Intl.DateTimeFormat(undefined, {'hour':'numeric', 'minute':'numeric'})
        else:
            self.date_formatter = {'format': def(date):
                return '{}:{}'.format(date.getHours(), date.getMinutes())
            }

    def show(self, container):
        self.container_id = container.getAttribute('id')
        top_row = E.div(
            E.div(
                E.div(self.overlay.view.book.metadata.title, style='max-width: 90%; text-overflow: ellipsis'),
                E.div(self.date_formatter.format(Date()), style='max-width: 9%; text-overflow: ellipsis'),
                onclick=def (evt):evt.stopPropagation();,
                style='font-size: smaller; padding: 0.5ex 1rem; border-bottom: solid 1px currentColor'
            )
        )
        set_css(top_row.firstChild, background_color=get_color('window-background'), display='flex', justify_content='space-between', align_items='baseline')
        container.appendChild(top_row)
        self.timer = setInterval(self.update_time, 1000)

    def update_time(self):
        document.getElementById(self.container_id).firstChild.firstChild.lastChild.textContent = self.date_formatter.format(Date())

    def on_hide(self):
        clearInterval(self.timer)
# }}}

class Overlay:

    def __init__(self, view):
        self.view = view
        c = self.clear_container()
        c.addEventListener('click', self.container_clicked)
        self.panels = []

    def clear_container(self):
        c = self.container
        clear(c)
        c.style.backgroundColor = 'transparent'
        c.style.color = get_color('window-foreground')
        return c

    @property
    def container(self):
        return document.getElementById('book-overlay')

    def container_clicked(self, evt):
        if self.panels.length and type(self.panels[-1].on_container_click) is 'function':
            self.panels[-1].on_container_click(evt)
        else:
            self.hide_current_panel()

    def show_loading_message(self, msg):
        lm = LoadingMessage(msg)
        self.panels.push(lm)
        self.show_current_panel()

    def hide_loading_message(self):
        if self.panels.length and isinstance(self.panels[-1], LoadingMessage):
            self.hide_current_panel()

    def hide_current_panel(self):
        p = self.panels.pop()
        if p and callable(p.on_hide):
            p.on_hide()
        if self.panels.length:
            self.show_current_panel()
        else:
            self.container.style.display = 'none'

    def show_current_panel(self):
        c = self.clear_container()
        c.style.display = 'block'
        if self.panels.length:
            self.panels[-1].show(c)

    def show(self):
        self.panels = [MainOverlay(self)]
        self.show_current_panel()
