# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from ajax import ajax
from gettext import gettext as _
from utils import base64encode, base64decode

def upgrade_schema(idb, old_version, new_version):
    print('upgrade_schema:', old_version, new_version)
    if not idb.objectStoreNames.contains('books'):
        idb.createObjectStore('books', {'keyPath':'key'})
    if not idb.objectStoreNames.contains('files'):
        idb.createObjectStore('files')
    if not idb.objectStoreNames.contains('objects'):
        idb.createObjectStore('objects', {'keyPath':'key'})

def file_store_name(book, name):
    return book.book_hash + ' ' + name

def get_error_details(event):
    desc = event.target
    if desc.error and desc.error.toString:
        desc = desc.error.toString()
    elif desc.errorCode:
        desc = desc.errorCode

IFRAME_SCRIPT_HASH = "__IFRAME_SCRIPT_HASH__"

DB_NAME = 'calibre-books-db-testing'  # TODO: Remove test suffix and change version back to 1
DB_VERSION = 1

class DB:

    def __init__(self, idb, ui, supports_blobs, iframe_script):
        self.interface_data = ui.interface_data
        self.idb = idb
        self.iframe_script = iframe_script
        self.supports_blobs = supports_blobs
        if not supports_blobs:
            print('IndexedDB does not support Blob storage, using base64 encoding instead')
        self.show_error = ui.show_error.bind(ui)

        idb.onerror = def(event):
            self.display_error(None, event)
            if console.dir:
                console.dir(event)
            else:
                console.log(event)

        idb.onversionchange = def(event):
            idb.close()
            ui.show_error(_('Database upgraded!'), _(
                'A newer version of calibre is available, please click the reload button in your browser.'))

    def display_error(self, msg, event):
        if event.already_displayed_by_calibre:
            return
        event.already_displayed_by_calibre = True
        msg = msg or _(
            'There was an error while interacting with the'
            ' database used to store books for offline reading. Click "Show details" for more information.')
        self.show_error(_('Cannot read book'), msg, get_error_details(event))

    def do_op(self, stores, data, error_msg, proceed, op='get', store=None):
        store = store or stores[0]
        if op is 'get':
            transaction = self.idb.transaction(stores)
            req = transaction.objectStore(store).get(data)
            req.onsuccess = def(event): proceed(req.result)
        elif op is 'put':
            transaction = self.idb.transaction(stores, 'readwrite')
            req = transaction.objectStore(store).put(data)
            req.onsuccess = proceed
        req.onerror = def(event):
            self.display_error(error_msg, event)

    def get_book(self, book_id, fmt, metadata, proceed):
        fmt = fmt.toUpperCase()
        # The key has to be a JavaScript array as otherwise it cannot be stored
        # into indexed db, because the RapydScript list has properties that
        # refer to non-serializable objects like functions.
        key = v'[self.interface_data.library_id, book_id, fmt]'
        self.do_op(['books'], key, _('Failed to read from the books database'), def(result):
            proceed(result or {
                'key':key,
                'is_complete':False,
                'stored_files': {},
                'book_hash':None,
                'last_read': Date(),
                'metadata': metadata,
                'manifest': None,
                'cover_width': None,
                'cover_height': None,
                'last_read_position': None,
            })
        )

    def save_manifest(self, book, manifest, proceed):
        book.manifest = manifest
        book.metadata = manifest.metadata
        book.book_hash = manifest.book_hash.hash
        book.stored_files = {}
        book.is_complete = False
        v'delete manifest["metadata"]'
        self.do_op(['books'], book, _('Failed to write to the books database'), proceed, op='put')

    def store_file(self, book, name, xhr, proceed, is_cover):
        store_as_text = xhr.responseType is 'text'
        fname = file_store_name(book, name)
        needs_encoding = not store_as_text and not self.supports_blobs
        book.stored_files[fname] = {'encoded':needs_encoding, 'mimetype':book.manifest.files[name].mimetype, 'store_as_text':store_as_text}
        if is_cover:
            self.store_cover(book, needs_encoding, xhr.response, name, fname, proceed)
        else:
            self.store_file_stage2(needs_encoding, xhr.response, name, fname, proceed)

    def store_cover(self, book, needs_encoding, data, name, fname, proceed):
        blob = data
        if needs_encoding:
            blob = Blob([data], {'type':'image/jpeg'})
        url = window.URL.createObjectURL(blob)
        img = new Image()
        proceeded = False

        def done():
            nonlocal proceeded
            if not proceeded:
                proceeded = True
                window.URL.revokeObjectURL(url)
                self.store_file_stage2(needs_encoding, data, name, fname, proceed)

        img.onload = def():
            book.cover_width = this.width
            book.cover_height = this.height
            done()

        img.onerror = def():
            print('WARNING: Failed to read dimensions of cover')
            done()
        img.src = url

    def store_file_stage2(self, needs_encoding, data, name, fname, proceed):
        if needs_encoding:
            data = base64encode(Uint8Array(data))
        req = self.idb.transaction(['files'], 'readwrite').objectStore('files').put(data, fname)
        req.onsuccess = def(event): proceed()
        req.onerror = def(event):
            proceed(str.format(_('Failed to store book data ({0}) with error: {1}'), name, get_error_details(event)))

    def finish_book(self, book, proceed):
        book.is_complete = True
        self.do_op(['books'], book, _('Failed to write to the books database'), proceed, op='put')

    def update_last_read_time(self, book):
        book.last_read = Date()
        self.do_op(['books'], book, _('Failed to write to the books database'), op='put')

    def get_file(self, book, name, proceed):
        key = file_store_name(book, name)
        err = str.format(_(
            'Failed to read the file {0} for the book {1} from the database'), name, book.metadata.title)
        self.do_op(['files'], key, err, def (result):
            if not result:
                self.show_error(_('Cannot read book'), err)
                return
            fdata = book.stored_files[key]
            mt = fdata.mimetype or 'application/octet-stream'
            if fdata.encoded:
                result = Blob([base64decode(fdata)], {'type':mt})
            proceed(result, name, mt, book)
        )

def create_db(ui, interface_data):
    if not window.indexedDB:
        return ui.db_initialized(_('Your browser does not support IndexedDB. Cannot read books. Consider using a modern browser, such as Firefox, Chrome or Edge.'))

    request = window.indexedDB.open(DB_NAME, DB_VERSION)

    request.onupgradeneeded = def(event):
        upgrade_schema(event.target.result, event.oldVersion, event.newVersion)

    request.onblocked = def(event):
        alert(_('Please close all other tabs with a calibre book open'))

    request.onerror = def(event):
        ui.db_initialized(_('You must allow calibre to use IndexedDB storage in your browser to read books'))

    request.onsuccess = def(event):
        blob = Blob(['test'], {'type':"text/plain"})
        idb = event.target.result
        try:
            req = idb.transaction(['files'], 'readwrite').objectStore('files').put(blob, ':-test-blob-:')
        except Exception:
            print('WARNING: browser does not support blob storage, calibre falling back to base64 encoding')
            create_db_stage2(idb, ui, interface_data, False)
            return
        req.onsuccess = def(event):
            create_db_stage2(idb, ui, interface_data, True)
        req.onerror = def(event):
            print('WARNING: browser does not support blob storage, calibre falling back to base64 encoding')
            create_db_stage2(idb, ui, interface_data, False)

def create_db_stage2(idb, ui, interface_data, supports_blobs):
    req = idb.transaction(['objects']).objectStore('objects').get('iframe.js')
    req.onerror = def(event):
        ui.db_initialized(_('Failed to initialize books database: ') + get_error_details(event))
    req.onsuccess = def(event):
        s = event.result
        if s and s.script_hash is IFRAME_SCRIPT_HASH:
            return ui.db_initialized(DB(idb, ui, supports_blobs, s.src))
        ajax('static/iframe.js', def(end_type, xhr, event):
            if end_type != 'load':
                return ui.db_initialized('<div>' + _('Failed to load book reader script') + '</div>' + xhr.error_html)
            obj = {'key':'iframe.js', 'script_hash': IFRAME_SCRIPT_HASH, 'src':xhr.responseText}
            req = idb.transaction(['objects'], 'readwrite').objectStore('objects').put(obj)
            req.onerror = def(event):
                ui.db_initialized(_('Failed to store book reader script in database: ') + get_error_details(event))
            req.onsuccess = def(event):
                ui.db_initialized(DB(idb, ui, supports_blobs, obj.src))
        ).send()
